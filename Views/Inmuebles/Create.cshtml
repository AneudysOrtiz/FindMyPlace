@model FindMyPlace.Models.Inmueble

@{
    ViewBag.Title = "Create";
}
<style>
    /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
    #map {
        height: 400px;
    }
</style>
<h2>Create</h2>



<div class="row">
    <div class="col-md-6" style="overflow:auto; max-height:500px">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Inmueble</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                <label class="control-label col-md-2">Categoría</label>
                <div class="col-md-10">
                    @Html.DropDownList("CategoriaId", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CategoriaId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">Tipo de Venta</label>
                <div class="col-md-10">
                    @Html.DropDownList("TipoVentaId", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TipoVentaId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">Condición</label>
                <div class="col-md-10">
                    @Html.DropDownList("CondicionId", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CondicionId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Habitaciones, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Habitaciones, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Habitaciones, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Area, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Area, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = "0", @step = "0.01" } })
                    @Html.ValidationMessageFor(model => model.Area, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">Moneda</label>
                <div class="col-md-10">
                    @Html.DropDownList("MonedaId", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.MonedaId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Precio, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Precio, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = "0", @step = "0.01" } })
                    @Html.ValidationMessageFor(model => model.Precio, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Direccion, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Direccion, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Direccion, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Descripcion, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Descripcion, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Descripcion, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">Amenidades</label>
                <div class="col-md-10">

                    @foreach (var item in ViewBag.Amenidades)
                    {
                        <input type="checkbox" id="amenidad-@item.AmenidadId" name="Amenidad" value="@item.AmenidadId" />
                        <label for="amenidad-@item.AmenidadId">@item.Descripcion</label>
                        <br />
                    }
                </div>
            </div>


            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>

            <input type="text" class="hidden" name="Latitude" />
            <input type="text" class="hidden" name="Longitude" />
        }
        <div>
            @Html.ActionLink("Back to List", "Index")
        </div>
    </div>
    <div class="col-md-6">
        <h4>Ubicación</h4>
        <hr />
        <div id="map"></div>
    </div>
</div>


<script>
    var map;
    var marker

    function placeMarker(location, map) {
        
        if (marker == null) {
            marker = new google.maps.Marker({
                position: location,
                map: map
            });
        } else { marker.setPosition(location); }

        map.panTo(location);
        $('input[name ="Latitude"]').val(location.lat());
        $('input[name ="Longitude"]').val(location.lng());
    }
    function initMap() {
        var lat = 18.4735048;
        var lng = -69.9158525;
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                lat = position.coords.latitude;
                lng = position.coords.longitude;
            });
        }

        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: lat, lng: lng },
            zoom: 13
        });

        google.maps.event.addListener(map, 'click', function (event) {
            placeMarker(event.latLng, map);
        });
    }

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAsCBz6lI00qX1Hf3SIL2XVdX_mT0asYB4&callback=initMap"
        async defer></script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
